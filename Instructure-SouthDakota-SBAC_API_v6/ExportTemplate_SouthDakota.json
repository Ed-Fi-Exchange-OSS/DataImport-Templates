{
    "title": "ExportTemplate-SouthDakota-SBAC",
    "description": "ExportTemplate SouthDakota SBAC",
    "apiVersion": "6.0",
    "template": {
        "maps": [
            {
                "name": "DataMap_SouthDakota-SBAC_FileVersion2019-ELA",
                "resourcePath": "/ed-fi/studentAssessments",
                "columnHeaders": [
                    "Student First Name",
                    "Student Last Name",
                    "Student ID",
                    "Student DOB",
                    "Gender",
                    "Race/Ethnicity",
                    "IDEA Indicator",
                    "Limited English Proficiency Status",
                    "Section 504 Status",
                    "Enrolled Grade",
                    "Enrolled School",
                    "Enrolled School ID",
                    "Enrolled District",
                    "Enrolled District ID",
                    "English Language Arts OppNumber",
                    "English Language Arts Scale Score",
                    "Standard Error for English Language Arts Scale Score",
                    "English Language Arts Achievement Level",
                    "English Language Arts Reported Lexile? Measure",
                    "Reading Claim Achievement Category",
                    "Reading Claim Scale Score",
                    "Reading Claim Standard Error",
                    "Writing Claim Achievement Category",
                    "Writing Claim Scale Score",
                    "Writing Claim Standard Error",
                    "Listening Claim Achievement Category",
                    "Listening Claim Scale Score",
                    "Listening Claim Standard Error",
                    "Research/Inquiry Claim Achievement Category",
                    "Research/Inquiry Claim Scale Score",
                    "Research/Inquiry Claim Standard Error",
                    "Argumentative Organization/Purpose",
                    "Argumentative Evidence/Elaboration",
                    "Argumentative Conventions",
                    "Explanatory Organization/Purpose",
                    "Explanatory Evidence/Elaboration",
                    "Explanatory Conventions",
                    "Narrative Organization/Purpose",
                    "Narrative Evidence/Elaboration",
                    "Narrative Conventions",
                    "Mathematics OppNumber",
                    "Mathematics Scale Score",
                    "Standard Error for Mathematics Scale Score",
                    "Mathematics Achievement Level",
                    "Mathematics Reported Quantile? Measure",
                    "Concepts and Procedures Claim Achievement Category",
                    "Concepts and Procedures Claim Scale Score",
                    "Concepts and Procedures Claim Standard Error",
                    "Problem Solving and Modeling & Data Analysis Claim Achievement Category",
                    "Problem Solving and Modeling & Data Analysis Claim Scale Score",
                    "Problem Solving and Modeling & Data Analysis Claim Standard Error",
                    "Communicating Reasoning Claim Achievement Category",
                    "Communicating Reasoning Claim Scale Score",
                    "Communicating Reasoning Claim Standard Error",
                    "DI_AdministrationDate",
                    "DI_AssessmentStudentIdentifier",
                    "DI_SchoolYear",
                    "DI_StudentId",
                    "DI_Domain1_Purpose",
                    "DI_Domain1_Elaboration",
                    "DI_Domain1_Conventions",
                    "DI_Domain2_Purpose",
                    "DI_Domain2_Elaboration",
                    "DI_Domain2_Conventions",
                    "DI_Domain3_Purpose",
                    "DI_Domain3_Elaboration",
                    "DI_Domain3_Conventions"
                ],
                "map": {
                    "studentAssessmentIdentifier": {
                        "Column": "DI_AssessmentStudentIdentifier"
                    },
                    "assessmentReference": {
                        "assessmentIdentifier": "SD-SBAC-ELA-V1",
                        "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                    },
                    "schoolYearTypeReference": {
                        "schoolYear": {
                            "Column": "DI_SchoolYear"
                        }
                    },
                    "studentReference": {
                        "studentUniqueId": {
                            "Column": "DI_StudentId"
                        }
                    },
                    "administrationDate": {
                        "Column": "DI_AdministrationDate"
                    },
                    "performanceLevels": [
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                            "performanceLevelDescriptor": {
                                "Column": "English Language Arts Achievement Level",
                                "Lookup": "SD-SBAC-SummativeAchivementLevels"
                            }
                        }
                    ],
                    "scoreResults": [
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Scale score",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer",
                            "result": {
                                "Column": "English Language Arts Scale Score"
                            }
                        },
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Standard error measurement",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer",
                            "result": {
                                "Column": "Standard Error for English Language Arts Scale Score"
                            }
                        },
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Lexile Measure",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                            "result": {
                                "Column": "English Language Arts Reported Lexile? Measure"
                            }
                        }
                    ],
                    "studentObjectiveAssessments": [
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-ELA-V1",
                                "identificationCode": "SD-SBAC-ELA-V1-C1",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "performanceLevels": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "performanceLevelDescriptor": {
                                        "Column": "Reading Claim Achievement Category",
                                        "Lookup": "SD-SBAC-ReportingCategory"
                                    }
                                }
                            ],
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "Reading Claim Achievement Category"
                                    }
                                }
                            ]
                        },
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-ELA-V1",
                                "identificationCode": "SD-SBAC-ELA-V1-C2",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "performanceLevels": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "performanceLevelDescriptor": {
                                        "Column": "Writing Claim Achievement Category",
                                        "Lookup": "SD-SBAC-ReportingCategory"
                                    }
                                }
                            ],
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "Writing Claim Achievement Category"
                                    }
                                }
                            ]
                        },
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-ELA-V1",
                                "identificationCode": "SD-SBAC-ELA-V1-C3",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "performanceLevels": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "performanceLevelDescriptor": {
                                        "Column": "Listening Claim Achievement Category",
                                        "Lookup": "SD-SBAC-ReportingCategory"
                                    }
                                }
                            ],
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "Listening Claim Achievement Category"
                                    }
                                }
                            ]
                        },
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-ELA-V1",
                                "identificationCode": "SD-SBAC-ELA-V1-C4",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "performanceLevels": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "performanceLevelDescriptor": {
                                        "Column": "Research/Inquiry Claim Achievement Category",
                                        "Lookup": "SD-SBAC-ReportingCategory"
                                    }
                                }
                            ],
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "Research/Inquiry Claim Achievement Category"
                                    }
                                }
                            ]
                        },
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-ELA-V1",
                                "identificationCode": "SD-SBAC-ELA-V1-D1",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Conventions",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "DI_Domain1_Conventions"
                                    }
                                },
                                {
                                    "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Elaboration",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "DI_Domain1_Elaboration"
                                    }
                                },
                                {
                                    "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Purpose",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "DI_Domain1_Purpose"
                                    }
                                }
                            ]
                        },
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-ELA-V1",
                                "identificationCode": "SD-SBAC-ELA-V1-D2",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Conventions",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "DI_Domain2_Conventions"
                                    }
                                },
                                {
                                    "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Elaboration",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "DI_Domain2_Elaboration"
                                    }
                                },
                                {
                                    "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Purpose",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "DI_Domain2_Purpose"
                                    }
                                }
                            ]
                        },
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-ELA-V1",
                                "identificationCode": "SD-SBAC-ELA-V1-D3",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Conventions",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "DI_Domain3_Conventions"
                                    }
                                },
                                {
                                    "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Elaboration",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "DI_Domain3_Elaboration"
                                    }
                                },
                                {
                                    "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Purpose",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "DI_Domain3_Purpose"
                                    }
                                }
                            ]
                        }
                    ],
                    "whenAssessedGradeLevelDescriptor": {
                        "Column": "Enrolled Grade",
                        "Lookup": "SD-SBAC_GradeLevel"
                    }
                },
                "customFileProcessor": "SouthDakota-SBAC_ODS.v3+_FileVersion2019",
                "attribute": "ELA"
            },
            {
                "name": "DataMap_SouthDakota-SBAC_FileVersion2019-MA",
                "resourcePath": "/ed-fi/studentAssessments",
                "columnHeaders": [
                    "Student First Name",
                    "Student Last Name",
                    "Student ID",
                    "Student DOB",
                    "Gender",
                    "Race/Ethnicity",
                    "IDEA Indicator",
                    "Limited English Proficiency Status",
                    "Section 504 Status",
                    "Enrolled Grade",
                    "Enrolled School",
                    "Enrolled School ID",
                    "Enrolled District",
                    "Enrolled District ID",
                    "English Language Arts OppNumber",
                    "English Language Arts Scale Score",
                    "Standard Error for English Language Arts Scale Score",
                    "English Language Arts Achievement Level",
                    "English Language Arts Reported Lexile? Measure",
                    "Reading Claim Achievement Category",
                    "Reading Claim Scale Score",
                    "Reading Claim Standard Error",
                    "Writing Claim Achievement Category",
                    "Writing Claim Scale Score",
                    "Writing Claim Standard Error",
                    "Listening Claim Achievement Category",
                    "Listening Claim Scale Score",
                    "Listening Claim Standard Error",
                    "Research/Inquiry Claim Achievement Category",
                    "Research/Inquiry Claim Scale Score",
                    "Research/Inquiry Claim Standard Error",
                    "Argumentative Organization/Purpose",
                    "Argumentative Evidence/Elaboration",
                    "Argumentative Conventions",
                    "Explanatory Organization/Purpose",
                    "Explanatory Evidence/Elaboration",
                    "Explanatory Conventions",
                    "Narrative Organization/Purpose",
                    "Narrative Evidence/Elaboration",
                    "Narrative Conventions",
                    "Mathematics OppNumber",
                    "Mathematics Scale Score",
                    "Standard Error for Mathematics Scale Score",
                    "Mathematics Achievement Level",
                    "Mathematics Reported Quantile? Measure",
                    "Concepts and Procedures Claim Achievement Category",
                    "Concepts and Procedures Claim Scale Score",
                    "Concepts and Procedures Claim Standard Error",
                    "Problem Solving and Modeling & Data Analysis Claim Achievement Category",
                    "Problem Solving and Modeling & Data Analysis Claim Scale Score",
                    "Problem Solving and Modeling & Data Analysis Claim Standard Error",
                    "Communicating Reasoning Claim Achievement Category",
                    "Communicating Reasoning Claim Scale Score",
                    "Communicating Reasoning Claim Standard Error",
                    "DI_AdministrationDate",
                    "DI_AssessmentStudentIdentifier",
                    "DI_SchoolYear",
                    "DI_StudentId"
                ],
                "map": {
                    "studentAssessmentIdentifier": {
                        "Column": "DI_AssessmentStudentIdentifier"
                    },
                    "assessmentReference": {
                        "assessmentIdentifier": "SD-SBAC-MA-V1",
                        "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                    },
                    "schoolYearTypeReference": {
                        "schoolYear": {
                            "Column": "DI_SchoolYear"
                        }
                    },
                    "studentReference": {
                        "studentUniqueId": {
                            "Column": "DI_StudentId"
                        }
                    },
                    "administrationDate": {
                        "Column": "DI_AdministrationDate"
                    },
                    "performanceLevels": [
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                            "performanceLevelDescriptor": {
                                "Column": "Mathematics Achievement Level",
                                "Lookup": "SD-SBAC-SummativeAchivementLevels"
                            }
                        }
                    ],
                    "scoreResults": [
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Scale score",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer",
                            "result": {
                                "Column": "Mathematics Scale Score"
                            }
                        },
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Standard error measurement",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer",
                            "result": {
                                "Column": "Standard Error for Mathematics Scale Score"
                            }
                        },
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Quantile Measure",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                            "result": {
                                "Column": "Mathematics Reported Quantile? Measure"
                            }
                        }
                    ],
                    "studentObjectiveAssessments": [
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-MA-V1",
                                "identificationCode": "SD-SBAC-MA-V1-C1",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "performanceLevels": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "performanceLevelDescriptor": {
                                        "Column": "Concepts and Procedures Claim Achievement Category",
                                        "Lookup": "SD-SBAC-ReportingCategory"
                                    }
                                }
                            ],
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "Concepts and Procedures Claim Achievement Category"
                                    }
                                }
                            ]
                        },
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-MA-V1",
                                "identificationCode": "SD-SBAC-MA-V1-C2-4",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "performanceLevels": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "performanceLevelDescriptor": {
                                        "Column": "Problem Solving and Modeling & Data Analysis Claim Achievement Category",
                                        "Lookup": "SD-SBAC-ReportingCategory"
                                    }
                                }
                            ],
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "Problem Solving and Modeling & Data Analysis Claim Achievement Category"
                                    }
                                }
                            ]
                        },
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-MA-V1",
                                "identificationCode": "SD-SBAC-MA-V1-C3",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "performanceLevels": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "performanceLevelDescriptor": {
                                        "Column": "Communicating Reasoning Claim Achievement Category",
                                        "Lookup": "SD-SBAC-ReportingCategory"
                                    }
                                }
                            ],
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "Communicating Reasoning Claim Achievement Category"
                                    }
                                }
                            ]
                        }
                    ],
                    "whenAssessedGradeLevelDescriptor": {
                        "Column": "Enrolled Grade",
                        "Lookup": "SD-SBAC_GradeLevel"
                    }
                },
                "customFileProcessor": "SouthDakota-SBAC_ODS.v3+_FileVersion2019",
                "attribute": "MA"
            },
            {
                "name": "DataMap_SouthDakota-SBAC_FileVersion2021-ELA",
                "resourcePath": "/ed-fi/studentAssessments",
                "columnHeaders": [
                    "Student Name",
                    "Student ID",
                    "Student DOB",
                    "Section 504 Status",
                    "Enrolled Grade",
                    "Race/Ethnicity",
                    "Gender",
                    "Limited English Proficiency Status",
                    "IDEA Indicator",
                    "Enrolled District",
                    "Enrolled School",
                    "Test Reason",
                    "Test OppNumber",
                    "Date Taken",
                    "Grade 5 ELA - Summative ScaleScore",
                    "Grade 5 ELA - Summative ScaleScore Standard Error",
                    "Grade 5 ELA - Summative PerformanceLevel",
                    "Listening PerformanceLevel",
                    "Reading PerformanceLevel",
                    "Research/Inquiry PerformanceLevel",
                    "Writing PerformanceLevel",
                    "Informational: Conventions",
                    "Informational: Elaboration",
                    "Informational: Purpose",
                    "Narrative: Conventions",
                    "Narrative: Elaboration",
                    "Narrative: Purpose",
                    "Opinion: Conventions",
                    "Opinion: Elaboration",
                    "Opinion: Purpose",
                    "DI_AdministrationDate",
                    "DI_AssessmentStudentIdentifier",
                    "DI_PerformanceLevel",
                    "DI_ScaleScore",
                    "DI_SchoolYear",
                    "DI_StandardError",
                    "DI_StudentId",
                    "DI_Domain1_Purpose",
                    "DI_Domain1_Elaboration",
                    "DI_Domain1_Conventions",
                    "DI_Domain2_Purpose",
                    "DI_Domain2_Elaboration",
                    "DI_Domain2_Conventions",
                    "DI_Domain3_Purpose",
                    "DI_Domain3_Elaboration",
                    "DI_Domain3_Conventions"
                ],
                "map": {
                    "studentAssessmentIdentifier": {
                        "Column": "DI_AssessmentStudentIdentifier"
                    },
                    "assessmentReference": {
                        "assessmentIdentifier": "SD-SBAC-ELA-V1",
                        "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                    },
                    "schoolYearTypeReference": {
                        "schoolYear": {
                            "Column": "DI_SchoolYear"
                        }
                    },
                    "studentReference": {
                        "studentUniqueId": {
                            "Column": "DI_StudentId"
                        }
                    },
                    "administrationDate": {
                        "Column": "DI_AdministrationDate"
                    },
                    "performanceLevels": [
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                            "performanceLevelDescriptor": {
                                "Column": "DI_PerformanceLevel",
                                "Lookup": "SD-SBAC-SummativeAchivementLevels"
                            }
                        }
                    ],
                    "scoreResults": [
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Scale score",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer",
                            "result": {
                                "Column": "DI_ScaleScore"
                            }
                        },
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Standard error measurement",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer",
                            "result": {
                                "Column": "DI_StandardError"
                            }
                        }
                    ],
                    "studentObjectiveAssessments": [
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-ELA-V1",
                                "identificationCode": "SD-SBAC-ELA-V1-C1",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "performanceLevels": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "performanceLevelDescriptor": {
                                        "Column": "Reading PerformanceLevel",
                                        "Lookup": "SD-SBAC-ReportingCategory"
                                    }
                                }
                            ],
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "Reading PerformanceLevel"
                                    }
                                }
                            ]
                        },
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-ELA-V1",
                                "identificationCode": "SD-SBAC-ELA-V1-C2",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "performanceLevels": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "performanceLevelDescriptor": {
                                        "Column": "Writing PerformanceLevel",
                                        "Lookup": "SD-SBAC-ReportingCategory"
                                    }
                                }
                            ],
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "Writing PerformanceLevel"
                                    }
                                }
                            ]
                        },
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-ELA-V1",
                                "identificationCode": "SD-SBAC-ELA-V1-C3",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "performanceLevels": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "performanceLevelDescriptor": {
                                        "Column": "Listening PerformanceLevel",
                                        "Lookup": "SD-SBAC-ReportingCategory"
                                    }
                                }
                            ],
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "Listening PerformanceLevel"
                                    }
                                }
                            ]
                        },
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-ELA-V1",
                                "identificationCode": "SD-SBAC-ELA-V1-C4",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "performanceLevels": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "performanceLevelDescriptor": {
                                        "Column": "Research/Inquiry PerformanceLevel",
                                        "Lookup": "SD-SBAC-ReportingCategory"
                                    }
                                }
                            ],
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "Research/Inquiry PerformanceLevel"
                                    }
                                }
                            ]
                        },
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-ELA-V1",
                                "identificationCode": "SD-SBAC-ELA-V1-D1",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Conventions",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "DI_Domain1_Conventions"
                                    }
                                },
                                {
                                    "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Elaboration",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "DI_Domain1_Elaboration"
                                    }
                                },
                                {
                                    "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Purpose",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "DI_Domain1_Purpose"
                                    }
                                }
                            ]
                        },
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-ELA-V1",
                                "identificationCode": "SD-SBAC-ELA-V1-D2",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Conventions",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "DI_Domain2_Conventions"
                                    }
                                },
                                {
                                    "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Elaboration",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "DI_Domain2_Elaboration"
                                    }
                                },
                                {
                                    "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Purpose",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "DI_Domain2_Purpose"
                                    }
                                }
                            ]
                        },
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-ELA-V1",
                                "identificationCode": "SD-SBAC-ELA-V1-D3",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Conventions",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "DI_Domain3_Conventions"
                                    }
                                },
                                {
                                    "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Elaboration",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "DI_Domain3_Elaboration"
                                    }
                                },
                                {
                                    "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Purpose",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "DI_Domain3_Purpose"
                                    }
                                }
                            ]
                        }
                    ],
                    "whenAssessedGradeLevelDescriptor": {
                        "Column": "Enrolled Grade",
                        "Lookup": "SD-SBAC_GradeLevel"
                    }
                },
                "customFileProcessor": "SouthDakota-SBAC_ODS.v3+_FileVersion2021",
                "attribute": "ELA"
            },
            {
                "name": "DataMap_SouthDakota-SBAC_FileVersion2021-MA",
                "resourcePath": "/ed-fi/studentAssessments",
                "columnHeaders": [
                    "Student Name",
                    "Student ID",
                    "Student DOB",
                    "Section 504 Status",
                    "Enrolled Grade",
                    "Race/Ethnicity",
                    "Gender",
                    "Limited English Proficiency Status",
                    "IDEA Indicator",
                    "Enrolled District",
                    "Enrolled School",
                    "Test Reason",
                    "Test OppNumber",
                    "Date Taken",
                    "Grade 6 Math - Summative ScaleScore",
                    "Grade 6 Math - Summative ScaleScore Standard Error",
                    "Grade 6 Math - Summative PerformanceLevel",
                    "Communicating Reasoning PerformanceLevel",
                    "Concepts and Procedures PerformanceLevel",
                    "Problem Solving and Modeling & Data Analysis  PerformanceLevel",
                    "DI_AdministrationDate",
                    "DI_AssessmentStudentIdentifier",
                    "DI_PerformanceLevel",
                    "DI_ScaleScore",
                    "DI_SchoolYear",
                    "DI_StandardError",
                    "DI_StudentId"
                ],
                "map": {
                    "studentAssessmentIdentifier": {
                        "Column": "DI_AssessmentStudentIdentifier"
                    },
                    "assessmentReference": {
                        "assessmentIdentifier": "SD-SBAC-MA-V1",
                        "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                    },
                    "schoolYearTypeReference": {
                        "schoolYear": {
                            "Column": "DI_SchoolYear"
                        }
                    },
                    "studentReference": {
                        "studentUniqueId": {
                            "Column": "DI_StudentId"
                        }
                    },
                    "administrationDate": {
                        "Column": "DI_AdministrationDate"
                    },
                    "performanceLevels": [
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                            "performanceLevelDescriptor": {
                                "Column": "DI_PerformanceLevel",
                                "Lookup": "SD-SBAC-SummativeAchivementLevels"
                            }
                        }
                    ],
                    "scoreResults": [
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Scale score",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer",
                            "result": {
                                "Column": "DI_ScaleScore"
                            }
                        },
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Standard error measurement",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer",
                            "result": {
                                "Column": "DI_StandardError"
                            }
                        }
                    ],
                    "studentObjectiveAssessments": [
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-MA-V1",
                                "identificationCode": "SD-SBAC-MA-V1-C1",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "performanceLevels": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "performanceLevelDescriptor": {
                                        "Column": "Concepts and Procedures PerformanceLevel",
                                        "Lookup": "SD-SBAC-ReportingCategory"
                                    }
                                }
                            ],
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "Concepts and Procedures PerformanceLevel"
                                    }
                                }
                            ]
                        },
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-MA-V1",
                                "identificationCode": "SD-SBAC-MA-V1-C2-4",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "performanceLevels": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "performanceLevelDescriptor": {
                                        "Column": "Problem Solving and Modeling & Data Analysis  PerformanceLevel",
                                        "Lookup": "SD-SBAC-ReportingCategory"
                                    }
                                }
                            ],
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "Problem Solving and Modeling & Data Analysis  PerformanceLevel"
                                    }
                                }
                            ]
                        },
                        {
                            "objectiveAssessmentReference": {
                                "assessmentIdentifier": "SD-SBAC-MA-V1",
                                "identificationCode": "SD-SBAC-MA-V1-C3",
                                "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                            },
                            "performanceLevels": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "performanceLevelDescriptor": {
                                        "Column": "Communicating Reasoning PerformanceLevel",
                                        "Lookup": "SD-SBAC-ReportingCategory"
                                    }
                                }
                            ],
                            "scoreResults": [
                                {
                                    "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                    "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level",
                                    "result": {
                                        "Column": "Communicating Reasoning PerformanceLevel"
                                    }
                                }
                            ]
                        }
                    ],
                    "whenAssessedGradeLevelDescriptor": {
                        "Column": "Enrolled Grade",
                        "Lookup": "SD-SBAC_GradeLevel"
                    }
                },
                "customFileProcessor": "SouthDakota-SBAC_ODS.v3+_FileVersion2021",
                "attribute": "MA"
            }
        ],
        "bootstraps": [
            {
                "name": "SouthDakota-SBAC-1_ARMD",
                "resourcePath": "/ed-fi/assessmentReportingMethodDescriptors",
                "data": [
                    {
                        "codeValue": "Conventions",
                        "description": "Conventions",
                        "namespace": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor",
                        "shortDescription": "Conventions"
                    },
                    {
                        "codeValue": "Elaboration",
                        "description": "Elaboration",
                        "namespace": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor",
                        "shortDescription": "Elaboration"
                    },
                    {
                        "codeValue": "Purpose",
                        "description": "Purpose",
                        "namespace": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor",
                        "shortDescription": "Purpose"
                    }
                ]
            },
            {
                "name": "SouthDakota-SBAC-1_PLD",
                "resourcePath": "/ed-fi/performanceLevelDescriptors",
                "data": [
                    {
                        "codeValue": "Above",
                        "description": "Above",
                        "namespace": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor",
                        "shortDescription": "Above"
                    },
                    {
                        "codeValue": "At/Near",
                        "description": "At/Near",
                        "namespace": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor",
                        "shortDescription": "At/Near"
                    },
                    {
                        "codeValue": "Below",
                        "description": "Below",
                        "namespace": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor",
                        "shortDescription": "Below"
                    },
                    {
                        "codeValue": "Level 1: Standard Not Met",
                        "description": "Level 1: Standard Not Met",
                        "namespace": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor",
                        "shortDescription": "Level 1: Standard Not Met"
                    },
                    {
                        "codeValue": "Level 2: Standard Nearly Met",
                        "description": "Level 2: Standard Nearly Met",
                        "namespace": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor",
                        "shortDescription": "Level 2: Standard Nearly Met"
                    },
                    {
                        "codeValue": "Level 3: Standard Met",
                        "description": "Level 3: Standard Met",
                        "namespace": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor",
                        "shortDescription": "Level 3: Standard Met"
                    },
                    {
                        "codeValue": "Level 4: Standard Exceeded",
                        "description": "Level 4: Standard Exceeded",
                        "namespace": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor",
                        "shortDescription": "Level 4: Standard Exceeded"
                    }
                ]
            },
            {
                "name": "SouthDakota-SBAC-2_Assessment_SD-SBAC-ELA-V1",
                "resourcePath": "/ed-fi/assessments",
                "data": {
                    "assessmentIdentifier": "SD-SBAC-ELA-V1",
                    "assessmentTitle": "South Dakota Smarter Balanced assessments (SBAC) - ELA",
                    "assessmentVersion": 2021,
                    "revisionDate": "2022-01-11",
                    "namespace": "uri://doe.sd.gov/SBAC/Assessment",
                    "assessedGradeLevels": [
                        {
                            "gradeLevelDescriptor": "uri://ed-fi.org/GradeLevelDescriptor#Third grade"
                        },
                        {
                            "gradeLevelDescriptor": "uri://ed-fi.org/GradeLevelDescriptor#Fourth grade"
                        },
                        {
                            "gradeLevelDescriptor": "uri://ed-fi.org/GradeLevelDescriptor#Fifth grade"
                        },
                        {
                            "gradeLevelDescriptor": "uri://ed-fi.org/GradeLevelDescriptor#Sixth grade"
                        },
                        {
                            "gradeLevelDescriptor": "uri://ed-fi.org/GradeLevelDescriptor#Seventh grade"
                        },
                        {
                            "gradeLevelDescriptor": "uri://ed-fi.org/GradeLevelDescriptor#Eighth grade"
                        },
                        {
                            "gradeLevelDescriptor": "uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade"
                        }
                    ],
                    "assessmentCategoryDescriptor": "uri://ed-fi.org/AssessmentCategoryDescriptor#State assessment",
                    "academicSubjects": [
                        {
                            "academicSubjectDescriptor": "uri://ed-fi.org/AcademicSubjectDescriptor#English Language Arts"
                        }
                    ],
                    "scores": [
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Scale score",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer"
                        },
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Standard error measurement",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer"
                        },
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Lexile Measure",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                        }
                    ],
                    "performanceLevels": [
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                            "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Level 1: Standard Not Met",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                        },
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                            "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Level 2: Standard Nearly Met",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                        },
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                            "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Level 3: Standard Met",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                        },
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                            "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Level 4: Standard Exceeded",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                        }
                    ]
                }
            },
            {
                "name": "SouthDakota-SBAC-2_Assessment_SD-SBAC-MA-V1",
                "resourcePath": "/ed-fi/assessments",
                "data": {
                    "assessmentIdentifier": "SD-SBAC-MA-V1",
                    "assessmentTitle": "South Dakota Smarter Balanced assessments (SBAC) - Mathematics",
                    "assessmentVersion": 2021,
                    "revisionDate": "2022-01-11",
                    "namespace": "uri://doe.sd.gov/SBAC/Assessment",
                    "assessedGradeLevels": [
                        {
                            "gradeLevelDescriptor": "uri://ed-fi.org/GradeLevelDescriptor#Third grade"
                        },
                        {
                            "gradeLevelDescriptor": "uri://ed-fi.org/GradeLevelDescriptor#Fourth grade"
                        },
                        {
                            "gradeLevelDescriptor": "uri://ed-fi.org/GradeLevelDescriptor#Fifth grade"
                        },
                        {
                            "gradeLevelDescriptor": "uri://ed-fi.org/GradeLevelDescriptor#Sixth grade"
                        },
                        {
                            "gradeLevelDescriptor": "uri://ed-fi.org/GradeLevelDescriptor#Seventh grade"
                        },
                        {
                            "gradeLevelDescriptor": "uri://ed-fi.org/GradeLevelDescriptor#Eighth grade"
                        },
                        {
                            "gradeLevelDescriptor": "uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade"
                        }
                    ],
                    "assessmentCategoryDescriptor": "uri://ed-fi.org/AssessmentCategoryDescriptor#State assessment",
                    "academicSubjects": [
                        {
                            "academicSubjectDescriptor": "uri://ed-fi.org/AcademicSubjectDescriptor#Mathematics"
                        }
                    ],
                    "scores": [
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Scale score",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer"
                        },
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Standard error measurement",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Integer"
                        },
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Quantile Measure",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                        }
                    ],
                    "performanceLevels": [
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                            "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Level 1: Standard Not Met",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                        },
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                            "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Level 2: Standard Nearly Met",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                        },
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                            "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Level 3: Standard Met",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                        },
                        {
                            "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                            "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Level 4: Standard Exceeded",
                            "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                        }
                    ]
                }
            },
            {
                "name": "SouthDakota-SBAC-3_ObjectiveAssessment_SD-SBAC-ELA-V1",
                "resourcePath": "/ed-fi/objectiveAssessments",
                "data": [
                    {
                        "identificationCode": "SD-SBAC-ELA-V1-C1",
                        "assessmentReference": {
                            "assessmentIdentifier": "SD-SBAC-ELA-V1",
                            "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                        },
                        "description": "Claim 1: Reading",
                        "scores": [
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            }
                        ],
                        "performanceLevels": [
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Above",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#At/Near",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Below",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            }
                        ]
                    },
                    {
                        "identificationCode": "SD-SBAC-ELA-V1-C2",
                        "assessmentReference": {
                            "assessmentIdentifier": "SD-SBAC-ELA-V1",
                            "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                        },
                        "description": "Claim 2: Writing",
                        "scores": [
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            }
                        ],
                        "performanceLevels": [
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Above",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#At/Near",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Below",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            }
                        ]
                    },
                    {
                        "identificationCode": "SD-SBAC-ELA-V1-C3",
                        "assessmentReference": {
                            "assessmentIdentifier": "SD-SBAC-ELA-V1",
                            "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                        },
                        "description": "Claim 3: Speaking/Listening",
                        "scores": [
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            }
                        ],
                        "performanceLevels": [
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Above",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#At/Near",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Below",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            }
                        ]
                    },
                    {
                        "identificationCode": "SD-SBAC-ELA-V1-C4",
                        "assessmentReference": {
                            "assessmentIdentifier": "SD-SBAC-ELA-V1",
                            "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                        },
                        "description": "Claim 4: Research & Inquiry",
                        "scores": [
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            }
                        ],
                        "performanceLevels": [
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Above",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#At/Near",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Below",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            }
                        ]
                    },
                    {
                        "identificationCode": "SD-SBAC-ELA-V1-D1",
                        "assessmentReference": {
                            "assessmentIdentifier": "SD-SBAC-ELA-V1",
                            "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                        },
                        "description": "Domain 1: Informational/Argumentative",
                        "scores": [
                            {
                                "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Conventions",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Elaboration",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Purpose",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            }
                        ]
                    },
                    {
                        "identificationCode": "SD-SBAC-ELA-V1-D2",
                        "assessmentReference": {
                            "assessmentIdentifier": "SD-SBAC-ELA-V1",
                            "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                        },
                        "description": "Domain 2: Opinion/Explanatory",
                        "scores": [
                            {
                                "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Conventions",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Elaboration",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Purpose",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            }
                        ]
                    },
                    {
                        "identificationCode": "SD-SBAC-ELA-V1-D3",
                        "assessmentReference": {
                            "assessmentIdentifier": "SD-SBAC-ELA-V1",
                            "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                        },
                        "description": "Domain 3: Narrative",
                        "scores": [
                            {
                                "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Conventions",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Elaboration",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://doe.sd.gov/SBAC/AssessmentReportingMethodDescriptor#Purpose",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "SouthDakota-SBAC-3_ObjectiveAssessment_SD-SBAC-MA-V1",
                "resourcePath": "/ed-fi/objectiveAssessments",
                "data": [
                    {
                        "identificationCode": "SD-SBAC-MA-V1-C1",
                        "assessmentReference": {
                            "assessmentIdentifier": "SD-SBAC-MA-V1",
                            "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                        },
                        "description": "Claim 1: Concepts and Procedures",
                        "scores": [
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            }
                        ],
                        "performanceLevels": [
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Above",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#At/Near",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Below",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            }
                        ]
                    },
                    {
                        "identificationCode": "SD-SBAC-MA-V1-C2-4",
                        "assessmentReference": {
                            "assessmentIdentifier": "SD-SBAC-MA-V1",
                            "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                        },
                        "description": "Claim 2 & 4: Problem Solving & Modeling/Data Analysis",
                        "scores": [
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            }
                        ],
                        "performanceLevels": [
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Above",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#At/Near",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Below",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            }
                        ]
                    },
                    {
                        "identificationCode": "SD-SBAC-MA-V1-C3",
                        "assessmentReference": {
                            "assessmentIdentifier": "SD-SBAC-MA-V1",
                            "namespace": "uri://doe.sd.gov/SBAC/Assessment"
                        },
                        "description": "Claim 3: Communicating Reasoning",
                        "scores": [
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            }
                        ],
                        "performanceLevels": [
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Above",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#At/Near",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            },
                            {
                                "assessmentReportingMethodDescriptor": "uri://ed-fi.org/AssessmentReportingMethodDescriptor#Achievement/proficiency level",
                                "performanceLevelDescriptor": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Below",
                                "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#Level"
                            }
                        ]
                    }
                ]
            }
        ],
        "lookups": [
            {
                "sourceTable": "SD-SBAC_GradeLevel",
                "key": "11",
                "value": "uri://ed-fi.org/GradeLevelDescriptor#Eleventh grade"
            },
            {
                "sourceTable": "SD-SBAC_GradeLevel",
                "key": "3",
                "value": "uri://ed-fi.org/GradeLevelDescriptor#Third grade"
            },
            {
                "sourceTable": "SD-SBAC_GradeLevel",
                "key": "4",
                "value": "uri://ed-fi.org/GradeLevelDescriptor#Fourth grade"
            },
            {
                "sourceTable": "SD-SBAC_GradeLevel",
                "key": "5",
                "value": "uri://ed-fi.org/GradeLevelDescriptor#Fifth grade"
            },
            {
                "sourceTable": "SD-SBAC_GradeLevel",
                "key": "6",
                "value": "uri://ed-fi.org/GradeLevelDescriptor#Sixth grade"
            },
            {
                "sourceTable": "SD-SBAC_GradeLevel",
                "key": "7",
                "value": "uri://ed-fi.org/GradeLevelDescriptor#Seventh grade"
            },
            {
                "sourceTable": "SD-SBAC_GradeLevel",
                "key": "8",
                "value": "uri://ed-fi.org/GradeLevelDescriptor#Eighth grade"
            },
            {
                "sourceTable": "SD-SBAC-ReportingCategory",
                "key": "Above Standard",
                "value": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Above"
            },
            {
                "sourceTable": "SD-SBAC-ReportingCategory",
                "key": "At/Near Standard",
                "value": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#At/Near"
            },
            {
                "sourceTable": "SD-SBAC-ReportingCategory",
                "key": "Below Standard",
                "value": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Below"
            },
            {
                "sourceTable": "SD-SBAC-SummativeAchivementLevels",
                "key": "1",
                "value": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Level 1: Standard Not Met"
            },
            {
                "sourceTable": "SD-SBAC-SummativeAchivementLevels",
                "key": "2",
                "value": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Level 2: Standard Nearly Met"
            },
            {
                "sourceTable": "SD-SBAC-SummativeAchivementLevels",
                "key": "3",
                "value": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Level 3: Standard Met"
            },
            {
                "sourceTable": "SD-SBAC-SummativeAchivementLevels",
                "key": "4",
                "value": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Level 4: Standard Exceeded"
            },
            {
                "sourceTable": "SD-SBAC-SummativeAchivementLevels",
                "key": "Level 1",
                "value": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Level 1: Standard Not Met"
            },
            {
                "sourceTable": "SD-SBAC-SummativeAchivementLevels",
                "key": "Level 2",
                "value": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Level 2: Standard Nearly Met"
            },
            {
                "sourceTable": "SD-SBAC-SummativeAchivementLevels",
                "key": "Level 3",
                "value": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Level 3: Standard Met"
            },
            {
                "sourceTable": "SD-SBAC-SummativeAchivementLevels",
                "key": "Level 4",
                "value": "uri://doe.sd.gov/SBAC/PerformanceLevelDescriptor#Level 4: Standard Exceeded"
            }
        ],
        "supplementalInformation": null,
        "preprocessors": [
            {
                "name": "SouthDakota-SBAC_ODS.v3+_FileVersion2019",
                "scriptContent": "[CmdletBinding()]\r\nParam(\r\n    [parameter(Mandatory = $true, ValueFromPipeline = $true)][string]$line\r\n)\r\n\r\n##########################################################\r\n### Ed-Fi ODS v3+\r\n### Assessment: Nevada Smarter Balanced Assessments (SBAC) 2019\r\n### Script: Custom File Processor\r\n##########################################################\r\n\r\nbegin {\r\n    # Set up the statistics\r\n    # validations: Hashtable of HashTables with properties for each screening period, and each screening period will have statistics like number of records not loaded, and detailed info\r\n    <#\r\n    #>\r\n    $global:statistics = @{\r\n        \"rowsProcessed\" = 0\r\n        \"rowsLoaded\"    = 0\r\n        \"validations\"   = @{}\r\n    }\r\n\r\n    # Prepare some other variables\r\n    $currentLineNumber = 0\r\n    $global:inputHeaders = @()\r\n    $global:headersLookup = @{}\r\n\r\n    #set api version\r\n    $global:apiVersion = $DataImport.ApiVersion\r\n\r\n    ## ODS functions\r\n    \r\n    function Get-StudentUniqueIdType ($apiVersion) {\r\n        <#\r\n            .SYNOPSIS\r\n                Determines whether the value in Student.studentUniqueId is a District or State ID value. \r\n    \r\n            .DESCRIPTION\r\n                Determining the studentUniqueId value type is done by querying the /students endpoint for 10 \r\n                students and then checking either the values in the identificationCodes[] array on either the\r\n                Student record (v2.5+ API) or the studentEducationOrganizationAssociation record (v3.x API) to\r\n                see whether the District or State ID matches the StudentUniqueId value. 10 students are checked \r\n                to make sure there aren't any discrepancies.\r\n    \r\n                NOTE: Only \"District\" and \"State\" Student ID types are used in this check; all others are ignored!\r\n    \r\n            .PARAMETER ApiVersion\r\n                The version number of the API as set in $DataImport.ApiVersion. For whatever reason the $DataImport\r\n                object is not directly addressable from within a module.\r\n    \r\n            .OUTPUTS\r\n                A string representing the type of ID stored in studentUniqueId. This value  will be either\r\n                'District' or 'State'.\r\n    \r\n                Throws an error on any failure to connect to or query the API or if one or more students of\r\n                the 10 checked have a different ID value type (e.g. one has 'District' while the rest have \r\n                'State'). Also throws an error if a match can't be made on any of the 10 students checked.\r\n    \r\n            .EXAMPLE\r\n                $studentUniqueIdType = Get-StudentUniqueIdType -apiVersion $DataImport.ApiVersion\r\n        #>\r\n    \r\n        # Do sanity checks on parameters\r\n        if (!$apiVersion) { throw \"The apiVersion parameter must be set to a valid value.\" }\r\n    \r\n        # Processing depends on API version\r\n        # Only valid for apis version 3 and above\r\n        \r\n        if ($apiVersion.StartsWith(\"3.\") -or $apiVersion.StartsWith(\"5.\") -or $apiVersion.StartsWith(\"6.\")) {\r\n            # Query for 10 students (whatever comes back first - and yes, this could be flaky)\r\n            try {\r\n                $jsonResponse = Invoke-OdsApiRequest -RequestPath \"/ed-fi/studentEducationOrganizationAssociations?limit=10\"\r\n                $seoas = ConvertFrom-Json $jsonResponse\r\n            }\r\n            catch {\r\n                throw $_\r\n            }\r\n            if ($seoas.Count -eq 0) { throw \"Unable to determine StudentUniqueId type as no StudentEducationOrganizationAssociations were found in the ODS.\" }\r\n        \r\n            # Iterate the list of students checking studentUniqueId against the ID code types. These should all be the same but you know student data...\r\n            $ret = \"\"\r\n            foreach ($seoa in $seoas) {\r\n                foreach ($idCode in $seoa.studentIdentificationCodes) {\r\n                    if ($seoa.studentReference.studentUniqueId -eq $idCode.identificationCode) {\r\n                        $codeType = $idCode.studentIdentificationSystemDescriptor.Split(\"#\")\r\n                        $codeType = $codeType[1]\r\n                        if ($codeType -in @(\"District\", \"State\")) {\r\n                            if ($ret -eq \"\") { $ret = $codeType }\r\n                            elseif ($codeType -ne $ret) { \r\n                                throw \"Unable to determine studentUniqueId type as StudentEducationOrganizationAssociations have been found with both District and State ID values in studentUniqueId\" \r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        \r\n            # If we got here then all 10 students had the same type of studentUniqueId value, so return that type\r\n            return $ret\r\n        }\r\n        else {\r\n            throw \"Attempt to connect to a version $($apiVersion) API, which is unsupported.\"\r\n        }\r\n        \r\n    }\r\n\r\n    function Get-StudentsIdMap ($apiVersion, $studentIdTypeCode) {\r\n        <#\r\n        .SYNOPSIS\r\n            Load from ODS studentId mapping from a given studentId type to its corresponding UniqueStudentId. $studentIdTypeCode valid values 'District','State'\r\n\r\n        .DESCRIPTION\r\n            Loads StudentUniqueId mapped to a passed studentId type from the ODS. \r\n            This data can then be used to look up a StudentUniqueId value by a specific studentIdType.\r\n\r\n        .PARAMETER ApiVersion\r\n            The version number of the API as set in $DataImport.ApiVersion. For whatever reason the $DataImport\r\n            object is not directly addressable from within a module.\r\n\r\n        .PARAMETER StudentIdTypeCode\r\n            The studentId Type that needs to be mapped to StudentUniqueId.\r\n\r\n        .OUTPUTS\r\n            A complex HashMap of values that you can treat as an object. The format is:\r\n            - StudentIdMap: Hashmap where keys are the desired studentIdType IdentificationCode value and the value is the StudentUniqueId from ODS\r\n                - Student Records (Key: StudentIdType IdentificationCode from ODS; Value: StudentUniqueId\r\n            \r\n            Throws an error on any failure to connect to or query the API or if one or more students of\r\n            the 10 checked have a different ID value type (e.g. one has 'District' while the rest have \r\n            'State')\r\n\r\n        .EXAMPLE\r\n            $students = Get-StudentsIdMap -apiVersion $DataImport.ApiVersion -studentIdTypeCode \"State\"\r\n        #>\r\n\r\n        # Set up some basic varialbes\r\n        $ret = @{\r\n            \"StudentIdMap\" = @{}\r\n            # \"DuplicateStudents\"         = @()\r\n            # \"NoAdditionalIdValuesFound\" = 0\r\n        }\r\n        $continue = $true\r\n        $offset = 0\r\n        $limit = 100\r\n\r\n        # Do sanity checks on parameters\r\n        if (!$apiVersion) { throw \"The apiVersion parameter must be set to a valid value.\" }\r\n\r\n        # Processing depends on the API version\r\n        if ($apiVersion.StartsWith(\"3.\") -or $apiVersion.StartsWith(\"5.\") -or $apiVersion.StartsWith(\"6.\")) {\r\n            try {\r\n                # Load the additional ID values\r\n                $continue = $true\r\n                $offset = 0\r\n                while ($continue) {\r\n                    $response = Invoke-OdsApiRequest -RequestPath \"/ed-fi/studentEducationOrganizationAssociations?limit=$limit&offset=$offset\"\r\n                    $students = ConvertFrom-Json $response\r\n                    if ($students.Count -gt 0) {\r\n                        foreach ($student in $students) {\r\n                            $studentUniqueId = $student.studentReference.studentUniqueId\r\n                            foreach ($idCode in $student.studentIdentificationCodes) {\r\n                                \r\n                                if ($idCode.studentIdentificationSystemDescriptor.Contains($studentIdTypeCode)) { \r\n                                    $ret.StudentIdMap[$idCode.identificationCode] = $studentUniqueId \r\n                                    # If found stop loop\r\n                                    break\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        $continue = $false\r\n                    }\r\n                    $offset += $limit\r\n                }\r\n        \r\n                # Return the data\r\n                return $ret\r\n            }\r\n            catch {\r\n                throw $_\r\n            }\r\n        }\r\n        else {\r\n            throw \"Attempt to connect to a version $($apiVersion) API, which is unsupported.\"\r\n        }\r\n\r\n    }\r\n\r\n     #Create list Student Id  lookup\r\n    function Get-StudentIdLookupNeeded ($studentIdType){\r\n        Write-Information \"$studentIdType\"\r\n        # Get the studentUniqueIdType\r\n        Write-Information \"Checking StudentUniqueIdType...\"\r\n        \r\n        $global:studentUniqueIdType = Get-AgentCacheItem -Key \"StudentUniqueIdType\"\r\n        \r\n        if (!$global:studentUniqueIdType) {\r\n            try {\r\n                $global:studentUniqueIdType = Get-StudentUniqueIdType -apiVersion $apiVersion\r\n                New-AgentCacheItem -Key \"StudentUniqueIdType\" -Value $global:studentUniqueIdType\r\n                if ($global:studentUniqueIdType) {\r\n                    Write-Information \"StudentUniqueId Type: $($global:studentUniqueIdType)\"\r\n                }  \r\n            }\r\n            catch {\r\n                Write-Error \"Failed to determine studentUniqueId type. Error returned is '$($_.Exception.Message)'\"\r\n                throw \"Fatal error while running Begin section of Preprocessor.\"\r\n            }\r\n        }\r\n\r\n        $global:needStudentIdLookup = $false\r\n        # Only if we are able to find studentIdType in ODS\r\n        if ($studentUniqueIdType) {\r\n            # Check whether student id in ODS matches the studentId in the assessment file.\r\n            if ($studentIdType -ne $studentUniqueIdType) {\r\n                $global:needStudentIdLookup = $true\r\n\r\n                # Only load students if IDs do not match(file StudentId vs ODS UniqueStudentId)\r\n                # Load the list of students\r\n                Write-Information \"Loading list of studentId mappings ...\"\r\n                $STUDENT_ID_MAPPING_CACHE_KEY = \"StudentsIdMap\"\r\n                $global:studentsIdMap = Get-AgentCacheItem -Key $STUDENT_ID_MAPPING_CACHE_KEY\r\n                if (!$global:studentsIdMap) {\r\n                    try {\r\n                        $s = Get-StudentsIdMap -apiVersion $apiVersion -studentIdTypeCode $studentIdType\r\n                        Write-Information \"Loaded $($s.StudentIdMap.Count) StudentId mapping records from ODS.\"\r\n                        $global:studentsIdMap = $s.StudentIdMap\r\n                        New-AgentCacheItem -Key $STUDENT_ID_MAPPING_CACHE_KEY -Value $global:studentsIdMap\r\n                    }\r\n                    catch {\r\n                        Write-Error \"Failed to load list of students from the ODS> Error returned is '$($_.Exception.Message)'\"\r\n                        throw \"Fatal error while running Begin section of Preprocessor.\"\r\n                    }\r\n                    if ($global:studentsIdMap.Count -eq 0) {\r\n                        throw \"StudentId from file does not match ODS student id and we were not able to load id mapping from ODS(relation from ODS UniqueId to studentId in file).\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            Write-Warning \"Unable to find StudentId Type. Script will proceed and use student identifier as it comes in assessment file.\"\r\n        }\r\n        return $needStudentIdLookup\r\n    }\r\n\r\n\r\n    ## Helper functions  \r\n\r\n    # Get a parsed record in Hashtable where properties are the headers(used for CSV data only)\r\n    function Get-ParsedRecord($headers, $line) {\r\n        # Deal with double-quote wrappers and the fact that fields may have embedded commas\r\n        # NOTE: This is vastly stupid, but we can't run Regex in ConstrainedLanguage mode so it is what it is.\r\n        if ($line.Contains('\",\"') -or $line.Contains(',\"') -or $line.Contains('\",')) {\r\n            $cleanLine = $line\r\n            $inQuote = $false\r\n            for ($i = 0; $i -le $cleanLine.length; $i++) {\r\n                if ($cleanLine[$i] -eq '\"') {\r\n                    $inQuote = !$inQuote\r\n                }\r\n                else {\r\n                    if ($cleanLine[$i] -eq \",\" -and $inQuote -eq $false) {\r\n                        $cleanLine = $cleanLine.Substring(0, $i) + \"^\" + $cleanLine.Substring($i + 1)\r\n                    }\r\n                }\r\n            }\r\n            $cleanLine = $cleanLine.Replace(\",\", \"\")\r\n            $fields = $cleanLine.split(\"^\")\r\n        }\r\n        else {\r\n            $fields = $line.split(\",\")\r\n        }\r\n        $ret = @{}\r\n        for ($i = 0; $i -lt $fields.Length; $i++) {\r\n            $ret.Add($headers[$i], ($fields[$i].Replace('\"', ''))) | Out-Null\r\n        }\r\n        return $ret\r\n    }\r\n\r\n     # Get a parsed csv line in an array of values (used for CSV data only)\r\n    function Get-ParsedRecordArray($line, $delimiter = \",\") {\r\n        # Deal with double-quote wrappers and the fact that fields may have embedded commas\r\n        # NOTE: This is vastly stupid, but we can't run Regex in ConstrainedLanguage mode so it is what it is.\r\n        if ($line.Contains('\"{0}\"' -f $delimiter ) -or $line.Contains('{0}\"' -f $delimiter) -or $line.Contains('\"{0}' -f $delimiter)) {\r\n            $cleanLine = $line\r\n            $inQuote = $false\r\n            for ($i = 0; $i -le $cleanLine.length; $i++) {\r\n                if ($cleanLine[$i] -eq '\"') {\r\n                    $inQuote = !$inQuote\r\n                }\r\n                else {\r\n                    if ($cleanLine[$i] -eq $delimiter -and $inQuote -eq $false) {\r\n                        $cleanLine = $cleanLine.Substring(0, $i) + \"^\" + $cleanLine.Substring($i + 1)\r\n                    }\r\n                }\r\n            }\r\n            $cleanLine = $cleanLine.Replace($delimiter, \"\")\r\n            $fields = $cleanLine.split(\"^\")\r\n        }\r\n        else {\r\n            $fields = $line.split($delimiter)\r\n        }\r\n        $ret = @()\r\n        for ($i = 0; $i -lt $fields.Length; $i++) {\r\n            $ret += $fields[$i].Replace('\"', '')\r\n        }\r\n        return $ret\r\n    }\r\n    # Parse Date from string\r\n    function Get-ParsedDate ($date, $inputFormat, $outputFormat = $null) {\r\n        <# \r\n                .SYNOPSIS\r\n                    Parse a date string and returns it in the correct format.\r\n        \r\n                .PARAMETER date (required)\r\n                    The date string to parse\r\n        \r\n                .PARAMETER inputFormat (required)\r\n                    The expected format of the incoming date string\r\n        \r\n                .PARAMETER outputFormat (optional)\r\n                    The desired format of the retured date string\r\n        \r\n                .OUTPUTS\r\n                    If no outputFormat is provided then a Date object is returned\r\n        \r\n                    If outputFormat is provided then a formatted string is returned\r\n        \r\n                    If parsing fails for any reason then $null is returned\r\n            #>\r\n        \r\n        try {\r\n            $d = $([datetime]::ParseExact($date, $inputFormat, $null))\r\n            if ($outputFormat) {\r\n                $d = Get-Date -Date $d -Format $outputFormat\r\n            }\r\n            return $d\r\n        }\r\n        catch {\r\n            return $null\r\n        }\r\n    }\r\n\r\n    # Add record to statistics indicating a record was not processed becuase of a validation error\r\n    function Get-StudentODSId($fileStudentId) {\r\n        if ($global:needStudentIdLookup) {\r\n            return $global:studentsIdMap[$fileStudentId]\r\n        }\r\n        else {\r\n            # StudentId matches ODS\r\n            return $fileStudentId\r\n        }\r\n    }\r\n\r\n    # Convert an array list of data into a CSV line for output\r\n    function Get-CSVLine($inputData) {\r\n        $ret = \"\"\r\n        foreach ($cell in $inputData) {\r\n            if ($ret -ne \"\") { $ret += \",\" }\r\n            $ret += ('\"' + $cell + '\"')\r\n        }\r\n        return $ret\r\n    }\r\n\r\n\r\n    ### Assessment fields\r\n\r\n    # Type of StudentId that will be used from assessment file to match student in ODS\r\n    # Valid values 'District','State'\r\n    $studentIdType = \"District\" \r\n\r\n    $global:fileColumnDelimiter = \",\"    \r\n    \r\n    #Create studentsIdMap \r\n    $needStudentIdLookup =  Get-StudentIdLookupNeeded($studentIdType)\r\n\r\n    # Check which assessment is being processed, same script is used for both assessemnts (ELA and Math) \r\n    # Expected values are 'ELA' or 'MA'\r\n    $global:ASSESSMENT_SUBJECT_ELA = \"ELA\"\r\n    $global:ASSESSMENT_SUBJECT_MATH = \"MA\"\r\n    \r\n\r\n    switch -Exact ($DataImport.MapAttribute) {\r\n        $global:ASSESSMENT_SUBJECT_ELA {\r\n            $global:assessmentSubject = $global:ASSESSMENT_SUBJECT_ELA\r\n        }\r\n        $global:ASSESSMENT_SUBJECT_MATH {\r\n            $global:assessmentSubject = $global:ASSESSMENT_SUBJECT_MATH\r\n        }\r\n        Default {\r\n            # If map attribute does not match then throw error and stop execution\r\n            $errorMessage = \"Error: Template is designed to receive a specific map attribute value ('ELA' or 'MA'). Value '$($DataImport.MapAttribute)' is not an option.\"\r\n            Write-Error \"$errorMessage\"\r\n            throw \"$errorMessage\"\r\n        }\r\n    }\r\n\r\n\r\n    #Extract Year from Filename\r\n    <#\r\n        Filename format: \"SBAC {dd}-{dd}\" where dd are two digits \r\n            \"SBAC {last two digits of year course started}-{last two digits of year course ended}\"\r\n        ex:\r\n            SBAC 18-19 Rapid_City_Area_51-4-Grade_8 - NO PII.csv\r\n            SBAC 20-21 RapidCityArea51-4_Grade3ELA-Summative_StudentData_135827969 PM - NO PII.csv\r\n            SBAC {dd}-{dd}...\r\n    #>\r\n    $global:SCHOOL_YEAR = $null\r\n    if ($DataImport.Filename -match \"^SBAC \\d{2}-(\\d{2}).*\") {\r\n        $global:SCHOOL_YEAR = \"20{0}\" -f $Matches[1]\r\n    }\r\n    if (!$global:SCHOOL_YEAR) {\r\n        $errorMsg = \"Unable to detect SchoolYear from file name('SBAC {dd}-{dd}....'), for ex: 2019 SchoolYear -> filename 'SBAC 18-19....'\"\r\n        Write-Error $errorMsg\r\n        Write-Error \"Provided Filename: $($DataImport.Filename)\"\r\n        throw $errorMsg\r\n    }\r\n\r\n\r\n    # invalid domain values, if this value is in source file pass to DataImport as $null\r\n    $global:INVALID_DOMAIN_VALUES = @()\r\n    $global:INVALID_DOMAIN_VALUES += \"N/A\"\r\n\r\n\r\n    ######################\r\n    ### Columns Definition \r\n    ######################\r\n    $global:SRC_COLUMN_Student_ID = \"Student ID\"\r\n\r\n    # Only applicable when subject is ELA\r\n    #columns that change depending grade level, from 5->6 domains change names\r\n    $global:SRC_COLUMNS_ChangeWithGradeLevel = [ordered]@{\r\n        # domain 1\r\n        \"Domain1_Purpose\"     = @(\"Informational Organization/Purpose\", \"Argumentative Organization/Purpose\")\r\n        \"Domain1_Elaboration\" = @(\"Informational Evidence/Elaboration\", \"Argumentative Evidence/Elaboration\")\r\n        \"Domain1_Conventions\" = @(\"Informational Conventions\", \"Argumentative Conventions\")\r\n        # domain 2\r\n        \"Domain2_Purpose\"     = @(\"Opinion Organization/Purpose\", \"Explanatory Organization/Purpose\")\r\n        \"Domain2_Elaboration\" = @(\"Opinion Evidence/Elaboration\", \"Explanatory Evidence/Elaboration\")\r\n        \"Domain2_Conventions\" = @(\"Opinion Conventions\", \"Explanatory Conventions\")\r\n        # domain 3\r\n        \"Domain3_Purpose\"     = @(\"Narrative Organization/Purpose\")\r\n        \"Domain3_Elaboration\" = @(\"Narrative Evidence/Elaboration\")\r\n        \"Domain3_Conventions\" = @(\"Narrative Conventions\")\r\n    }\r\n    \r\n\r\n\r\n    # Custom/computed output columns. key: output column name, value: HashTable with source column name and other info\r\n    \r\n    $global:CUSTOM_COLUMN_MAP = [ordered]@{\r\n        \"DI_StudentId\"                   = @{ \"SourceColumnName\" = $global:SRC_COLUMN_Student_ID; }\r\n        \"DI_AdministrationDate\"          = @{ \"SourceColumnName\" = \"\"; }\r\n        \"DI_SchoolYear\"                  = @{ \"SourceColumnName\" = \"\"; }\r\n        \"DI_AssessmentStudentIdentifier\" = @{ \"SourceColumnName\" = \"\" }\r\n    }\r\n\r\n    # Assesment specific functions\r\n\r\n    # Get Normalized output column name given an source column name\r\n    function Get-DIColumnName($srcName) {\r\n        return \"DI_{0}\" -f $srcName\r\n    }\r\n\r\n}\r\n\r\nprocess {\r\n    $currentLineNumber += 1\r\n    $global:statistics.rowsProcessed += 1\r\n\r\n    # Make sure we got something\r\n    if (!$line) { Write-Error \"Line $currentLineNumber does not contain any data\"; return }\r\n\r\n    # File is fixed width and does not contain headers, so on first line output headers before exporting calues\r\n    # If the first line then output all of the headers\r\n    if ($currentLineNumber -eq 1) { \r\n\r\n        # We assume headers will not have commas in the names\r\n        #$headerRow = $line.Split(\",\")    \r\n        $headerRow = Get-ParsedRecordArray -line $line\r\n\r\n        $outputHeaders = @()\r\n\r\n\r\n        # 1 - Loop thru headers to find and fix empty of duplicate headers\r\n        for ($i = 0; $i -lt $headerRow.Count; $i++) {\r\n            $item = $headerRow[$i]\r\n\r\n            # handle empty headers\r\n            if (!$item) {\r\n                $newName = \"EMPTY-$i\"\r\n                Write-Warning \"Found empty column at position $($i + 1). Renaming column to '$newName'.\"\r\n                $item = $newName\r\n            }\r\n            # handle duplicate headers\r\n            if ($global:headersLookup[$item]) {\r\n                $newName = \"$item-$i\"\r\n                Write-Warning \"Found duplicate column name of '$item' at position $($i + 1). Renaming column to '$newName'.\"\r\n                $item = $newName\r\n            }\r\n            $global:inputHeaders += $item            \r\n            $outputHeaders += $item\r\n            $global:headersLookup.Add($item, $index) | Out-Null     \r\n            \r\n        }      \r\n\r\n        # Headers/columns\r\n        # 2 - If there are custom headers add to output header line\r\n        if ($global:CUSTOM_COLUMN_MAP.Count) {            \r\n            $outputHeaders += $( $global:CUSTOM_COLUMN_MAP.Keys | Sort-Object )\r\n        }\r\n\r\n        if ($global:assessmentSubject -eq $global:ASSESSMENT_SUBJECT_ELA) {\r\n            # 3 domains that change name over grade levels\r\n            foreach ($outputColName in $global:SRC_COLUMNS_ChangeWithGradeLevel.Keys) {\r\n                $outputHeaders += Get-DIColumnName($outputColName)\r\n            }\r\n        }\r\n        \r\n        Write-Output $(Get-CSVLine($outputHeaders))\r\n        return\r\n        #does not return after headers because first line contains values not headers, headers are fixed\r\n    }\r\n\r\n    # array, Ordered output values\r\n    $orderedOutputValues = @()\r\n\r\n    # HashTable, will hold all input values for current line, used in case computed columns need to reference input values\r\n    $row = @{}\r\n    \r\n    # Not the cleanest of solutions, but none of the values should have double quotes, replace to remove wrapping quotes if present\r\n    #$row = Get-ParsedRecord -headers $($global:inputHeaders) -line $line\r\n    $row = ConvertFrom-Csv -InputObject $line -Header $global:inputHeaders\r\n\r\n    # 1 - add all values as they come in line\r\n    #$orderedOutputValues = $line.Split(\",\")\r\n    $orderedOutputValues = Get-ParsedRecordArray -line $line\r\n\r\n    # Validation will tell whether or not a record has the required values needed to be posted to ODS, \r\n    # if not valid error code and line number will be displayed in the summary\r\n    $passedValidation = $true\r\n    $validationId = $null\r\n    # 2 - Process custom/computed columns\r\n    if ($global:CUSTOM_COLUMN_MAP.Count) {            \r\n        foreach ($outColumnName in  $( $global:CUSTOM_COLUMN_MAP.Keys | Sort-Object )) {\r\n                    \r\n            $srcInfo = $global:CUSTOM_COLUMN_MAP[$outColumnName]\r\n            $srcColName = $srcInfo.SourceColumnName   \r\n            \r\n            ### DataImport Assessment Custom Columns\r\n            switch -Exact ($outColumnName) {\r\n                # StudentId\r\n                \"DI_StudentId\" {\r\n                    $stdId = Get-StudentODSId($row.$srcColName)\r\n\r\n                    # Validation, this is a required field, if empty will be unable to post to ODS.\r\n                    if (!$stdId) {\r\n                        $passedValidation = $false\r\n                        $validationId = \"InvalidStudentId\"\r\n                        break\r\n                    }\r\n    \r\n                    $orderedOutputValues += $stdId\r\n                    break\r\n                }\r\n    \r\n                # Admin Date\r\n                \"DI_AdministrationDate\" {\r\n                    \r\n                    ## export file does not contain Date Taken or SchoolYear, SchoolYear extracted from file name\r\n                    ## admin date\r\n                    $adminDate = \"04/15/{0}\" -f $global:SCHOOL_YEAR\r\n                    \r\n                    # Validation, this is a required field, if empty will be unable to post to ODS\r\n                    if (!$adminDate) {\r\n                        $passedValidation = $false\r\n                        $validationId = \"InvalidAdministrationDate\"\r\n                        break\r\n                    }\r\n    \r\n                    $orderedOutputValues += $adminDate\r\n                    break\r\n                }\r\n    \r\n                # School Year\r\n                \"DI_SchoolYear\" {\r\n                    ## export file does not contain Date Taken or SchoolYear, SchoolYear extracted from file name\r\n                    $schoolYear = $global:SCHOOL_YEAR\r\n\r\n                    # Validation, this is a required field, if empty will be unable to post to ODS\r\n                    if (!$schoolYear) {\r\n                        $passedValidation = $false\r\n                        $validationId = \"InvalidSchoolYear\"\r\n                        break\r\n                    }\r\n    \r\n                    $orderedOutputValues += $schoolYear\r\n                    break\r\n                }\r\n    \r\n                # Assessment Student Identifier\r\n                \"DI_AssessmentStudentIdentifier\" {    \r\n                    $assessStudentId = $global:SCHOOL_YEAR\r\n                            \r\n                    # Validation, this is a required field, if empty will be unable to post to ODS\r\n                    if (!$assessStudentId) {\r\n                        $passedValidation = $false\r\n                        $validationId = \"InvalidStudentAssessmentId\"\r\n                        break\r\n                    }\r\n    \r\n                    $orderedOutputValues += $assessStudentId\r\n                    break\r\n                }\r\n\r\n                Default {\r\n                    # In case of no implementation for custom column add $null output to preserve output format and order\r\n                    $orderedOutputValues += $null\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }     \r\n\r\n    if ($global:assessmentSubject -eq $global:ASSESSMENT_SUBJECT_ELA) {\r\n        # 3 domains that change name over grade levels\r\n        foreach ($outColName in $global:SRC_COLUMNS_ChangeWithGradeLevel.Keys) {\r\n        \r\n            $possibleSrcColumnNames = $global:SRC_COLUMNS_ChangeWithGradeLevel[$outColName]\r\n\r\n            $srcValue = $null\r\n            foreach ($colName in $possibleSrcColumnNames) {\r\n                if ($row.$colName) {\r\n                    $srcValue = $row.$colName\r\n                    #column name found, no need to keep looking at possible column names\r\n                    break\r\n                }\r\n            }\r\n\r\n            #validate values\r\n            if ($global:INVALID_DOMAIN_VALUES -icontains $srcValue) {\r\n                $srcValue = $null\r\n            }\r\n\r\n            $orderedOutputValues += $srcValue\r\n        }\r\n    }\r\n\r\n    # If not valid add to statistics to notify user at the end of execution and skip record and do not post current for current row this screening period to ODS\r\n    if (!$passedValidation) {\r\n        # Only print once per row\r\n        if (!$errorInCurrentRow) {\r\n            Write-Warning \"Invalid record see statistics summary for details.($currentLineNumber)\"\r\n        }            \r\n\r\n        # Check if this validation error already added for current screening period\r\n        if ($global:statistics.validations[$validationId]) {\r\n            $global:statistics.validations[$validationId] += $currentLineNumber\r\n        }\r\n        else {\r\n            $global:statistics.validations.Add($validationId, @($currentLineNumber)) | Out-Null\r\n        }\r\n        \r\n        # Skip current line do not pass values to DataImport\r\n        return\r\n    }\r\n\r\n    Write-Output $(Get-CSVLine($orderedOutputValues))\r\n    $global:statistics.rowsLoaded ++    \r\n}\r\n\r\nend {\r\n\r\n    Write-Information \"SUMMARY: `\r\n    #    Rows Processed: $($global:statistics.rowsProcessed); `\r\n    #    Rows Loaded: $($global:statistics.rowsLoaded)\"\r\n\r\n    foreach ($validationId in $global:statistics.validations.Keys) {\r\n        Write-Warning \"Error reason: '$validationId'\"                \r\n        Write-Information \"Line number(s):\"\r\n        $lineNumbers = $global:statistics.validations[$validationId]\r\n        $errorThreshold = 50\r\n        if ($lineNumbers.Count -gt $errorThreshold) {\r\n            Write-Warning \"There are $($lineNumbers.Count) lines with errors. Will only print the first $errorThreshold line numbers where errors ocurred.\"\r\n            $lineNumbers = $lineNumbers[0..$($errorThreshold - 1)]\r\n        }\r\n        Write-Warning \"$([string]::Join(\",\",$lineNumbers))\"\r\n    }\r\n\r\n}",
                "requireOdsApiAccess": true,
                "hasAttribute": true
            },
            {
                "name": "SouthDakota-SBAC_ODS.v3+_FileVersion2021",
                "scriptContent": "[CmdletBinding()]\r\nParam(\r\n    [parameter(Mandatory = $true, ValueFromPipeline = $true)][string]$line\r\n)\r\n\r\n##########################################################\r\n### Ed-Fi ODS v3+\r\n### Assessment: Nevada Smarter Balanced Assessments (SBAC)\r\n### Script: Custom File Processor\r\n##########################################################\r\n\r\nbegin {\r\n    # Set up the statistics\r\n    # validations: Hashtable of HashTables with properties for each screening period, and each screening period will have statistics like number of records not loaded, and detailed info\r\n    <#\r\n    #>\r\n    $global:statistics = @{\r\n        \"rowsProcessed\" = 0\r\n        \"rowsLoaded\"    = 0\r\n        \"validations\"   = @{}\r\n    }\r\n\r\n    # Prepare some other variables\r\n    $currentLineNumber = 0\r\n    $global:inputHeaders = @()\r\n    $global:headersLookup = @{}\r\n\r\n    #set api version\r\n    $global:apiVersion = $DataImport.ApiVersion\r\n\r\n    ## ODS functions\r\n    \r\n    function Get-StudentUniqueIdType ($apiVersion) {\r\n        <#\r\n            .SYNOPSIS\r\n                Determines whether the value in Student.studentUniqueId is a District or State ID value. \r\n    \r\n            .DESCRIPTION\r\n                Determining the studentUniqueId value type is done by querying the /students endpoint for 10 \r\n                students and then checking either the values in the identificationCodes[] array on either the\r\n                Student record (v2.5+ API) or the studentEducationOrganizationAssociation record (v3.x API) to\r\n                see whether the District or State ID matches the StudentUniqueId value. 10 students are checked \r\n                to make sure there aren't any discrepancies.\r\n    \r\n                NOTE: Only \"District\" and \"State\" Student ID types are used in this check; all others are ignored!\r\n    \r\n            .PARAMETER ApiVersion\r\n                The version number of the API as set in $DataImport.ApiVersion. For whatever reason the $DataImport\r\n                object is not directly addressable from within a module.\r\n    \r\n            .OUTPUTS\r\n                A string representing the type of ID stored in studentUniqueId. This value  will be either\r\n                'District' or 'State'.\r\n    \r\n                Throws an error on any failure to connect to or query the API or if one or more students of\r\n                the 10 checked have a different ID value type (e.g. one has 'District' while the rest have \r\n                'State'). Also throws an error if a match can't be made on any of the 10 students checked.\r\n    \r\n            .EXAMPLE\r\n                $studentUniqueIdType = Get-StudentUniqueIdType -apiVersion $DataImport.ApiVersion\r\n        #>\r\n    \r\n        # Do sanity checks on parameters\r\n        if (!$apiVersion) { throw \"The apiVersion parameter must be set to a valid value.\" }\r\n    \r\n        # Processing depends on API version\r\n        # Only valid for apis version 3 and above\r\n        \r\n        if ($apiVersion.StartsWith(\"3.\") -or $apiVersion.StartsWith(\"5.\") -or $apiVersion.StartsWith(\"6.\")) {\r\n            # Query for 10 students (whatever comes back first - and yes, this could be flaky)\r\n            try {\r\n                $jsonResponse = Invoke-OdsApiRequest -RequestPath \"/ed-fi/studentEducationOrganizationAssociations?limit=10\"\r\n                $seoas = ConvertFrom-Json $jsonResponse\r\n            }\r\n            catch {\r\n                throw $_\r\n            }\r\n            if ($seoas.Count -eq 0) { throw \"Unable to determine StudentUniqueId type as no StudentEducationOrganizationAssociations were found in the ODS.\" }\r\n        \r\n            # Iterate the list of students checking studentUniqueId against the ID code types. These should all be the same but you know student data...\r\n            $ret = \"\"\r\n            foreach ($seoa in $seoas) {\r\n                foreach ($idCode in $seoa.studentIdentificationCodes) {\r\n                    if ($seoa.studentReference.studentUniqueId -eq $idCode.identificationCode) {\r\n                        $codeType = $idCode.studentIdentificationSystemDescriptor.Split(\"#\")\r\n                        $codeType = $codeType[1]\r\n                        if ($codeType -in @(\"District\", \"State\")) {\r\n                            if ($ret -eq \"\") { $ret = $codeType }\r\n                            elseif ($codeType -ne $ret) { \r\n                                throw \"Unable to determine studentUniqueId type as StudentEducationOrganizationAssociations have been found with both District and State ID values in studentUniqueId\" \r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        \r\n            # If we got here then all 10 students had the same type of studentUniqueId value, so return that type\r\n            return $ret\r\n        }\r\n        else {\r\n            throw \"Attempt to connect to a version $($apiVersion) API, which is unsupported.\"\r\n        }\r\n        \r\n    }\r\n\r\n    function Get-StudentsIdMap ($apiVersion, $studentIdTypeCode) {\r\n        <#\r\n        .SYNOPSIS\r\n            Load from ODS studentId mapping from a given studentId type to its corresponding UniqueStudentId. $studentIdTypeCode valid values 'District','State'\r\n\r\n        .DESCRIPTION\r\n            Loads StudentUniqueId mapped to a passed studentId type from the ODS. \r\n            This data can then be used to look up a StudentUniqueId value by a specific studentIdType.\r\n\r\n        .PARAMETER ApiVersion\r\n            The version number of the API as set in $DataImport.ApiVersion. For whatever reason the $DataImport\r\n            object is not directly addressable from within a module.\r\n\r\n        .PARAMETER StudentIdTypeCode\r\n            The studentId Type that needs to be mapped to StudentUniqueId.\r\n\r\n        .OUTPUTS\r\n            A complex HashMap of values that you can treat as an object. The format is:\r\n            - StudentIdMap: Hashmap where keys are the desired studentIdType IdentificationCode value and the value is the StudentUniqueId from ODS\r\n                - Student Records (Key: StudentIdType IdentificationCode from ODS; Value: StudentUniqueId\r\n            \r\n            Throws an error on any failure to connect to or query the API or if one or more students of\r\n            the 10 checked have a different ID value type (e.g. one has 'District' while the rest have \r\n            'State')\r\n\r\n        .EXAMPLE\r\n            $students = Get-StudentsIdMap -apiVersion $DataImport.ApiVersion -studentIdTypeCode \"State\"\r\n        #>\r\n\r\n        # Set up some basic varialbes\r\n        $ret = @{\r\n            \"StudentIdMap\" = @{}\r\n            # \"DuplicateStudents\"         = @()\r\n            # \"NoAdditionalIdValuesFound\" = 0\r\n        }\r\n        $continue = $true\r\n        $offset = 0\r\n        $limit = 100\r\n\r\n        # Do sanity checks on parameters\r\n        if (!$apiVersion) { throw \"The apiVersion parameter must be set to a valid value.\" }\r\n\r\n        # Processing depends on the API version\r\n        if ($apiVersion.StartsWith(\"3.\") -or $apiVersion.StartsWith(\"5.\") -or $apiVersion.StartsWith(\"6.\")) {\r\n            try {\r\n                # Load the additional ID values\r\n                $continue = $true\r\n                $offset = 0\r\n                while ($continue) {\r\n                    $response = Invoke-OdsApiRequest -RequestPath \"/ed-fi/studentEducationOrganizationAssociations?limit=$limit&offset=$offset\"\r\n                    $students = ConvertFrom-Json $response\r\n                    if ($students.Count -gt 0) {\r\n                        foreach ($student in $students) {\r\n                            $studentUniqueId = $student.studentReference.studentUniqueId\r\n                            foreach ($idCode in $student.studentIdentificationCodes) {\r\n                                \r\n                                if ($idCode.studentIdentificationSystemDescriptor.Contains($studentIdTypeCode)) { \r\n                                    $ret.StudentIdMap[$idCode.identificationCode] = $studentUniqueId \r\n                                    # If found stop loop\r\n                                    break\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        $continue = $false\r\n                    }\r\n                    $offset += $limit\r\n                }\r\n        \r\n                # Return the data\r\n                return $ret\r\n            }\r\n            catch {\r\n                throw $_\r\n            }\r\n        }\r\n        else {\r\n            throw \"Attempt to connect to a version $($apiVersion) API, which is unsupported.\"\r\n        }\r\n\r\n    }\r\n    #Create list Student Id  lookup\r\n    function Get-StudentIdLookupNeeded ($studentIdType){\r\n         Write-Information \"$studentIdType\"\r\n        # Get the studentUniqueIdType\r\n        Write-Information \"Checking StudentUniqueIdType...\"\r\n        \r\n        $global:studentUniqueIdType = Get-AgentCacheItem -Key \"StudentUniqueIdType\"\r\n        \r\n        if (!$global:studentUniqueIdType) {\r\n            try {\r\n                $global:studentUniqueIdType = Get-StudentUniqueIdType -apiVersion $apiVersion\r\n                New-AgentCacheItem -Key \"StudentUniqueIdType\" -Value $global:studentUniqueIdType\r\n                if ($global:studentUniqueIdType) {\r\n                    Write-Information \"StudentUniqueId Type: $($global:studentUniqueIdType)\"\r\n                }  \r\n            }\r\n            catch {\r\n                Write-Error \"Failed to determine studentUniqueId type. Error returned is '$($_.Exception.Message)'\"\r\n                throw \"Fatal error while running Begin section of Preprocessor.\"\r\n            }\r\n        }\r\n\r\n        $global:needStudentIdLookup = $false\r\n        # Only if we are able to find studentIdType in ODS\r\n        if ($studentUniqueIdType) {\r\n            # Check whether student id in ODS matches the studentId in the assessment file.\r\n            if ($studentIdType -ne $studentUniqueIdType) {\r\n                $global:needStudentIdLookup = $true\r\n\r\n                # Only load students if IDs do not match(file StudentId vs ODS UniqueStudentId)\r\n                # Load the list of students\r\n                Write-Information \"Loading list of studentId mappings ...\"\r\n                $STUDENT_ID_MAPPING_CACHE_KEY = \"StudentsIdMap\"\r\n                $global:studentsIdMap = Get-AgentCacheItem -Key $STUDENT_ID_MAPPING_CACHE_KEY\r\n                if (!$global:studentsIdMap) {\r\n                    try {\r\n                        $s = Get-StudentsIdMap -apiVersion $apiVersion -studentIdTypeCode $studentIdType\r\n                        Write-Information \"Loaded $($s.StudentIdMap.Count) StudentId mapping records from ODS.\"\r\n                        $global:studentsIdMap = $s.StudentIdMap\r\n                        New-AgentCacheItem -Key $STUDENT_ID_MAPPING_CACHE_KEY -Value $global:studentsIdMap\r\n                    }\r\n                    catch {\r\n                        Write-Error \"Failed to load list of students from the ODS> Error returned is '$($_.Exception.Message)'\"\r\n                        throw \"Fatal error while running Begin section of Preprocessor.\"\r\n                    }\r\n                    if ($global:studentsIdMap.Count -eq 0) {\r\n                        throw \"StudentId from file does not match ODS student id and we were not able to load id mapping from ODS(relation from ODS UniqueId to studentId in file).\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            Write-Warning \"Unable to find StudentId Type. Script will proceed and use student identifier as it comes in assessment file.\"\r\n        }\r\n        return $needStudentIdLookup\r\n    }\r\n    ## Helper functions  \r\n\r\n    # Get a parsed record in Hashtable where properties are the headers(used for CSV data only)\r\n    function Get-ParsedRecord($headers, $line) {\r\n        # Deal with double-quote wrappers and the fact that fields may have embedded commas\r\n        # NOTE: This is vastly stupid, but we can't run Regex in ConstrainedLanguage mode so it is what it is.\r\n        if ($line.Contains('\",\"') -or $line.Contains(',\"') -or $line.Contains('\",')) {\r\n            $cleanLine = $line\r\n            $inQuote = $false\r\n            for ($i = 0; $i -le $cleanLine.length; $i++) {\r\n                if ($cleanLine[$i] -eq '\"') {\r\n                    $inQuote = !$inQuote\r\n                }\r\n                else {\r\n                    if ($cleanLine[$i] -eq \",\" -and $inQuote -eq $false) {\r\n                        $cleanLine = $cleanLine.Substring(0, $i) + \"^\" + $cleanLine.Substring($i + 1)\r\n                    }\r\n                }\r\n            }\r\n            $cleanLine = $cleanLine.Replace(\",\", \"\")\r\n            $fields = $cleanLine.split(\"^\")\r\n        }\r\n        else {\r\n            $fields = $line.split(\",\")\r\n        }\r\n        $ret = @{}\r\n        for ($i = 0; $i -lt $fields.Length; $i++) {\r\n            $ret.Add($headers[$i], ($fields[$i].Replace('\"', ''))) | Out-Null\r\n        }\r\n        return $ret\r\n    }\r\n\r\n    # Get a parsed csv line in an array of values (used for CSV data only)\r\n    function Get-ParsedRecordArray($line, $delimiter = \",\") {\r\n        # Deal with double-quote wrappers and the fact that fields may have embedded commas\r\n        # NOTE: This is vastly stupid, but we can't run Regex in ConstrainedLanguage mode so it is what it is.\r\n        if ($line.Contains('\"{0}\"' -f $delimiter ) -or $line.Contains('{0}\"' -f $delimiter) -or $line.Contains('\"{0}' -f $delimiter)) {\r\n            $cleanLine = $line\r\n            $inQuote = $false\r\n            for ($i = 0; $i -le $cleanLine.length; $i++) {\r\n                if ($cleanLine[$i] -eq '\"') {\r\n                    $inQuote = !$inQuote\r\n                }\r\n                else {\r\n                    if ($cleanLine[$i] -eq $delimiter -and $inQuote -eq $false) {\r\n                        $cleanLine = $cleanLine.Substring(0, $i) + \"^\" + $cleanLine.Substring($i + 1)\r\n                    }\r\n                }\r\n            }\r\n            $cleanLine = $cleanLine.Replace($delimiter, \"\")\r\n            $fields = $cleanLine.split(\"^\")\r\n        }\r\n        else {\r\n            $fields = $line.split($delimiter)\r\n        }\r\n        $ret = @()\r\n        for ($i = 0; $i -lt $fields.Length; $i++) {\r\n            $ret += $fields[$i].Replace('\"', '')\r\n        }\r\n        return $ret\r\n    }\r\n\r\n\r\n    # Parse Date from string\r\n    function Get-ParsedDate ($date, $inputFormat, $outputFormat = $null) {\r\n        <# \r\n                .SYNOPSIS\r\n                    Parse a date string and returns it in the correct format.\r\n        \r\n                .PARAMETER date (required)\r\n                    The date string to parse\r\n        \r\n                .PARAMETER inputFormat (required)\r\n                    The expected format of the incoming date string\r\n        \r\n                .PARAMETER outputFormat (optional)\r\n                    The desired format of the retured date string\r\n        \r\n                .OUTPUTS\r\n                    If no outputFormat is provided then a Date object is returned\r\n        \r\n                    If outputFormat is provided then a formatted string is returned\r\n        \r\n                    If parsing fails for any reason then $null is returned\r\n            #>\r\n        \r\n        try {\r\n            $d = $([datetime]::ParseExact($date, $inputFormat, $null))\r\n            if ($outputFormat) {\r\n                $d = Get-Date -Date $d -Format $outputFormat\r\n            }\r\n            return $d\r\n        }\r\n        catch {\r\n            return $null\r\n        }\r\n    }\r\n\r\n    # Add record to statistics indicating a record was not processed becuase of a validation error\r\n    function Get-StudentODSId($fileStudentId) {\r\n        if ($global:needStudentIdLookup) {\r\n            return $global:studentsIdMap[$fileStudentId]\r\n        }\r\n        else {\r\n            # StudentId matches ODS\r\n            return $fileStudentId\r\n        }\r\n    }\r\n\r\n    # Convert an array list of data into a CSV line for output\r\n    function Get-CSVLine($inputData) {\r\n        $ret = \"\"\r\n        foreach ($cell in $inputData) {\r\n            if ($ret -ne \"\") { $ret += \",\" }\r\n            $ret += ('\"' + $cell + '\"')\r\n        }\r\n        return $ret\r\n    }\r\n\r\n    function Get-SchoolYear($dateString) {\r\n        $parsedDate = (Get-ParsedDate -date $dateString -inputFormat \"M/d/yyyy\" -outputFormat \"M/d/yyyy\") -as [datetime]\r\n\r\n        $resp = $null\r\n        if ($parsedDate) {\r\n            if ($parsedDate) {\r\n                if ($parsedDate.Month -ge 8) {\r\n                    $resp = $parsedDate.Year + 1\r\n                }\r\n                else {\r\n                    $resp = $parsedDate.Year\r\n                }\r\n            }\r\n        }\r\n        return $resp\r\n    }\r\n\r\n\r\n    ### Assessment fields\r\n\r\n    # Type of StudentId that will be used from assessment file to match student in ODS\r\n    # Valid values 'District','State'\r\n    $studentIdType = \"District\" \r\n\r\n    $global:fileColumnDelimiter = \",\"    \r\n    \r\n    #Create studentsIdMap \r\n    $needStudentIdLookup =  Get-StudentIdLookupNeeded($studentIdType)\r\n\r\n\r\n    # Check which assessment is being processed, same script is used for both assessemnts (ELA and Math) \r\n    # Expected values are 'ELA' or 'MA'\r\n    $global:ASSESSMENT_SUBJECT_ELA = \"ELA\"\r\n    $global:ASSESSMENT_SUBJECT_MATH = \"MA\"\r\n    \r\n    #Grade Level, summarive columns change depending on gradeLevel, detect which grade level is being processed to know where to pull the data from\r\n    $global:GRADE_LEVEL = $null\r\n\r\n    switch -Exact ($DataImport.MapAttribute) {\r\n        $global:ASSESSMENT_SUBJECT_ELA {\r\n            $global:assessmentSubject = $global:ASSESSMENT_SUBJECT_ELA\r\n        }\r\n        $global:ASSESSMENT_SUBJECT_MATH {\r\n            $global:assessmentSubject = $global:ASSESSMENT_SUBJECT_MATH\r\n        }\r\n        Default {\r\n            # If map attribute does not match then throw error and stop execution\r\n            $errorMessage = \"Error: Template is designed to receive a specific map attribute value ('ELA' or 'MA'). Value '$($DataImport.MapAttribute)' is not an option.\"\r\n            Write-Error \"$errorMessage\"\r\n            throw \"$errorMessage\"\r\n        }\r\n    }\r\n\r\n\r\n\r\n    # invalid domain values, if this value is in source file pass to DataImport as $null\r\n    $global:INVALID_DOMAIN_VALUES = @()\r\n    $global:INVALID_DOMAIN_VALUES += \"N/A\"\r\n\r\n\r\n    ######################\r\n    ### Columns Definition \r\n    ######################\r\n    $global:SRC_COLUMN_Student_ID = \"Student ID\"\r\n    $global:SRC_COLUMN_AdministrationDate = \"Date Taken\"\r\n\r\n\r\n    # depend on subject\r\n    switch ($global:assessmentSubject) {\r\n        $global:ASSESSMENT_SUBJECT_ELA {\r\n            $global:SRC_COLUMN_TEMPLATE_ScaleScore = \"Grade {0} ELA - Summative ScaleScore\"\r\n            $global:SRC_COLUMN_TEMPLATE_StandardError = \"Grade {0} ELA - Summative ScaleScore Standard Error\"\r\n            $global:SRC_COLUMN_TEMPLATE_PerformanceLevel = \"Grade {0} ELA - Summative PerformanceLevel\"\r\n            break\r\n        }\r\n        $global:ASSESSMENT_SUBJECT_MATH {\r\n            $global:SRC_COLUMN_TEMPLATE_ScaleScore = \"Grade {0} Math - Summative ScaleScore\"\r\n            $global:SRC_COLUMN_TEMPLATE_StandardError = \"Grade {0} Math - Summative ScaleScore Standard Error\"\r\n            $global:SRC_COLUMN_TEMPLATE_PerformanceLevel = \"Grade {0} Math - Summative PerformanceLevel\"\r\n            break\r\n        }\r\n        Default {\r\n            $errorMessage = \"Error: Unable to set template for scores columns without a defined assessment subject(either MA or ELA). Verify map attribute value ('ELA' or 'MA'). Value '$($DataImport.MapAttribute)' is not an option.\"\r\n            Write-Error \"$errorMessage\"\r\n            throw \"$errorMessage\"\r\n\r\n        }\r\n    }\r\n    \r\n\r\n\r\n    # Only applicable when subject is ELA\r\n    #columns that change depending grade level, from 5->6 domains change names\r\n    $global:SRC_COLUMNS_ChangeWithGradeLevel = [ordered]@{\r\n        # domain 1\r\n        \"Domain1_Purpose\"     = @(\"Informational: Purpose\", \"Argumentative: Purpose\")\r\n        \"Domain1_Elaboration\" = @(\"Informational: Elaboration\", \"Argumentative: Elaboration\")\r\n        \"Domain1_Conventions\" = @(\"Informational: Conventions\", \"Argumentative: Conventions\")\r\n        # domain 2\r\n        \"Domain2_Purpose\"     = @(\"Opinion: Purpose\", \"Explanatory: Purpose\")\r\n        \"Domain2_Elaboration\" = @(\"Opinion: Elaboration\", \"Explanatory: Elaboration\")\r\n        \"Domain2_Conventions\" = @(\"Opinion: Conventions\", \"Explanatory: Conventions\")\r\n        # domain 3\r\n        \"Domain3_Purpose\"     = @(\"Narrative: Purpose\")\r\n        \"Domain3_Elaboration\" = @(\"Narrative: Elaboration\")\r\n        \"Domain3_Conventions\" = @(\"Narrative: Conventions\")\r\n    }\r\n    \r\n\r\n\r\n    # Custom/computed output columns. key: output column name, value: HashTable with source column name and other info\r\n    \r\n    $global:CUSTOM_COLUMN_MAP = [ordered]@{\r\n        \"DI_StudentId\"                   = @{ \"SourceColumnName\" = $global:SRC_COLUMN_Student_ID; }\r\n        \"DI_AdministrationDate\"          = @{ \"SourceColumnName\" = $global:SRC_COLUMN_AdministrationDate; }\r\n        \"DI_SchoolYear\"                  = @{ \"SourceColumnName\" = \"\"; }\r\n        \"DI_AssessmentStudentIdentifier\" = @{ \"SourceColumnName\" = \"\" }\r\n        \"DI_ScaleScore\"                  = @{ \"SourceColumnName\" = \"\" }\r\n        \"DI_StandardError\"               = @{ \"SourceColumnName\" = \"\" }\r\n        \"DI_PerformanceLevel\"            = @{ \"SourceColumnName\" = \"\" }\r\n    }\r\n\r\n    # Assesment specific functions\r\n\r\n    # Get Normalized output column name given an source column name\r\n    function Get-DIColumnName($srcName) {\r\n        return \"DI_{0}\" -f $srcName\r\n    }\r\n\r\n}\r\n\r\nprocess {\r\n    $currentLineNumber += 1\r\n    $global:statistics.rowsProcessed += 1\r\n\r\n    # Make sure we got something\r\n    if (!$line) { Write-Error \"Line $currentLineNumber does not contain any data\"; return }\r\n\r\n    # File is fixed width and does not contain headers, so on first line output headers before exporting calues\r\n    # If the first line then output all of the headers\r\n    if ($currentLineNumber -eq 1) { \r\n\r\n        # We assume headers will not have commas in the names\r\n        #$headerRow = $line.Split(\",\")    \r\n        $headerRow = Get-ParsedRecordArray -line $line\r\n\r\n        $outputHeaders = @()\r\n\r\n\r\n        # 1 - Loop thru headers to find and fix empty of duplicate headers\r\n        for ($i = 0; $i -lt $headerRow.Count; $i++) {\r\n            $item = $headerRow[$i]\r\n\r\n            # handle empty headers\r\n            if (!$item) {\r\n                $newName = \"EMPTY-$i\"\r\n                Write-Warning \"Found empty column at position $($i + 1). Renaming column to '$newName'.\"\r\n                $item = $newName\r\n            }\r\n            # handle duplicate headers\r\n            if ($global:headersLookup[$item]) {\r\n                $newName = \"$item-$i\"\r\n                Write-Warning \"Found duplicate column name of '$item' at position $($i + 1). Renaming column to '$newName'.\"\r\n                $item = $newName\r\n            }\r\n\r\n            # Detect Grade Level\r\n            # Grade Level, summarive columns change depending on gradeLevel, detect which grade level is being processed to know where to pull the data from\r\n            if ($null -eq $global:GRADE_LEVEL) {\r\n                if ($item -match \"^Grade (\\d+)\") {\r\n                    $global:GRADE_LEVEL = $Matches[1]\r\n                }\r\n            }\r\n\r\n\r\n            $global:inputHeaders += $item            \r\n            $outputHeaders += $item\r\n            $global:headersLookup.Add($item, $index) | Out-Null     \r\n            \r\n        }      \r\n\r\n        # Headers/columns\r\n        # 2 - If there are custom headers add to output header line\r\n        if ($global:CUSTOM_COLUMN_MAP.Count) {            \r\n            $outputHeaders += $( $global:CUSTOM_COLUMN_MAP.Keys | Sort-Object )\r\n        }\r\n\r\n        if ($global:assessmentSubject -eq $global:ASSESSMENT_SUBJECT_ELA) {\r\n            # 3 domains that change name over grade levels\r\n            foreach ($outputColName in $global:SRC_COLUMNS_ChangeWithGradeLevel.Keys) {\r\n                $outputHeaders += Get-DIColumnName($outputColName)\r\n            }\r\n        }\r\n        \r\n        Write-Output $(Get-CSVLine($outputHeaders))\r\n        return\r\n        #does not return after headers because first line contains values not headers, headers are fixed\r\n    }\r\n\r\n    # array, Ordered output values\r\n    $orderedOutputValues = @()\r\n\r\n    # HashTable, will hold all input values for current line, used in case computed columns need to reference input values\r\n    $row = @{}\r\n    \r\n    # Not the cleanest of solutions, but none of the values should have double quotes, replace to remove wrapping quotes if present\r\n    #$row = Get-ParsedRecord -headers $($global:inputHeaders) -line $line\r\n    $row = ConvertFrom-Csv -InputObject $line -Header $global:inputHeaders\r\n\r\n    # 1 - add all values as they come in line\r\n    #$orderedOutputValues = $line.Split(\",\")\r\n    $orderedOutputValues = Get-ParsedRecordArray -line $line\r\n\r\n    # Validation will tell whether or not a record has the required values needed to be posted to ODS, \r\n    # if not valid error code and line number will be displayed in the summary\r\n    $passedValidation = $true\r\n    $validationId = $null\r\n    # 2 - Process custom/computed columns\r\n    if ($global:CUSTOM_COLUMN_MAP.Count) {            \r\n        foreach ($outColumnName in  $( $global:CUSTOM_COLUMN_MAP.Keys | Sort-Object )) {\r\n                    \r\n            $srcInfo = $global:CUSTOM_COLUMN_MAP[$outColumnName]\r\n            $srcColName = $srcInfo.SourceColumnName   \r\n            \r\n            ### DataImport Assessment Custom Columns\r\n            switch -Exact ($outColumnName) {\r\n                # StudentId\r\n                \"DI_StudentId\" {\r\n                    $stdId = Get-StudentODSId($row.$srcColName)\r\n\r\n                    # Validation, this is a required field, if empty will be unable to post to ODS.\r\n                    if (!$stdId) {\r\n                        $passedValidation = $false\r\n                        $validationId = \"InvalidStudentId\"\r\n                        break\r\n                    }\r\n    \r\n                    $orderedOutputValues += $stdId\r\n                    break\r\n                }\r\n    \r\n                # Admin Date\r\n                \"DI_AdministrationDate\" {\r\n                    \r\n                    ## export file does not contain Date Taken or SchoolYear, SchoolYear extracted from file name\r\n                    ## admin date\r\n                    $adminDate = $row.$srcColName\r\n                    \r\n                    # Validation, this is a required field, if empty will be unable to post to ODS\r\n                    if (!$adminDate) {\r\n                        $passedValidation = $false\r\n                        $validationId = \"InvalidAdministrationDate\"\r\n                        break\r\n                    }\r\n    \r\n                    $orderedOutputValues += $adminDate\r\n                    break\r\n                }\r\n    \r\n                # School Year\r\n                \"DI_SchoolYear\" {\r\n                    ## export file does not contain Date Taken or SchoolYear, SchoolYear extracted from file name\r\n                    $dateStr = $row.$($global:SRC_COLUMN_AdministrationDate)\r\n\r\n                    $schoolYear = Get-SchoolYear -dateString $dateStr\r\n                    \r\n                    # Validation, this is a required field, if empty will be unable to post to ODS\r\n                    if (!$schoolYear) {\r\n                        $passedValidation = $false\r\n                        $validationId = \"InvalidSchoolYear\"\r\n                        break\r\n                    }\r\n    \r\n                    $orderedOutputValues += $schoolYear\r\n                    break\r\n                }\r\n    \r\n                # Assessment Student Identifier\r\n                \"DI_AssessmentStudentIdentifier\" {    \r\n                    $dateStr = $row.$($global:SRC_COLUMN_AdministrationDate)\r\n                    $schoolYear = Get-SchoolYear -dateString $dateStr\r\n                    $assessStudentId = $schoolYear\r\n                            \r\n                    # Validation, this is a required field, if empty will be unable to post to ODS\r\n                    if (!$assessStudentId) {\r\n                        $passedValidation = $false\r\n                        $validationId = \"InvalidStudentAssessmentId\"\r\n                        break\r\n                    }\r\n    \r\n                    $orderedOutputValues += $assessStudentId\r\n                    break\r\n                }\r\n\r\n                \"DI_ScaleScore\" {\r\n                    $ssColName = $global:SRC_COLUMN_TEMPLATE_ScaleScore -f $global:GRADE_LEVEL\r\n                    $rawValue = $row.$ssColName\r\n                    $orderedOutputValues += $rawValue\r\n\r\n                    break\r\n                }\r\n\r\n                \"DI_StandardError\" {\r\n                    $ssColName = $global:SRC_COLUMN_TEMPLATE_StandardError -f $global:GRADE_LEVEL\r\n                    $rawValue = $row.$ssColName\r\n                    $orderedOutputValues += $rawValue\r\n                    break\r\n                }\r\n\r\n                \"DI_PerformanceLevel\" {\r\n                    $ssColName = $global:SRC_COLUMN_TEMPLATE_PerformanceLevel -f $global:GRADE_LEVEL\r\n                    $rawValue = $row.$ssColName\r\n                    $orderedOutputValues += $rawValue\r\n                    break\r\n                }\r\n\r\n                Default {\r\n                    # In case of no implementation for custom column add $null output to preserve output format and order\r\n                    $orderedOutputValues += $null\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }     \r\n\r\n    if ($global:assessmentSubject -eq $global:ASSESSMENT_SUBJECT_ELA) {\r\n        # 3 domains that change name over grade levels\r\n        foreach ($outColName in $global:SRC_COLUMNS_ChangeWithGradeLevel.Keys) {\r\n        \r\n            $possibleSrcColumnNames = $global:SRC_COLUMNS_ChangeWithGradeLevel[$outColName]\r\n\r\n            $srcValue = $null\r\n            foreach ($colName in $possibleSrcColumnNames) {\r\n                if ($row.$colName) {\r\n                    $srcValue = $row.$colName\r\n                    #column name found, no need to keep looking at possible column names\r\n                    break\r\n                }\r\n            }\r\n\r\n            #validate values\r\n            if ($global:INVALID_DOMAIN_VALUES -icontains $srcValue) {\r\n                $srcValue = $null\r\n            }\r\n\r\n            $orderedOutputValues += $srcValue\r\n        }\r\n    }\r\n\r\n    # If not valid add to statistics to notify user at the end of execution and skip record and do not post current for current row this screening period to ODS\r\n    if (!$passedValidation) {\r\n        # Only print once per row\r\n        if (!$errorInCurrentRow) {\r\n            Write-Warning \"Invalid record see statistics summary for details.($currentLineNumber)\"\r\n        }            \r\n\r\n        # Check if this validation error already added for current screening period\r\n        if ($global:statistics.validations[$validationId]) {\r\n            $global:statistics.validations[$validationId] += $currentLineNumber\r\n        }\r\n        else {\r\n            $global:statistics.validations.Add($validationId, @($currentLineNumber)) | Out-Null\r\n        }\r\n        \r\n        # Skip current line do not pass values to DataImport\r\n        return\r\n    }\r\n\r\n    Write-Output $(Get-CSVLine($orderedOutputValues))\r\n    $global:statistics.rowsLoaded ++    \r\n}\r\n\r\nend {\r\n\r\n    Write-Information \"SUMMARY: `\r\n        Rows Processed: $($global:statistics.rowsProcessed); `\r\n        Rows Loaded: $($global:statistics.rowsLoaded)\"\r\n\r\n    foreach ($validationId in $global:statistics.validations.Keys) {\r\n        Write-Warning \"Error reason: '$validationId'\"                \r\n        Write-Information \"Line number(s):\"\r\n        $lineNumbers = $global:statistics.validations[$validationId]\r\n        $errorThreshold = 50\r\n        if ($lineNumbers.Count -gt $errorThreshold) {\r\n            Write-Warning \"There are $($lineNumbers.Count) lines with errors. Will only print the first $errorThreshold line numbers where errors ocurred.\"\r\n            $lineNumbers = $lineNumbers[0..$($errorThreshold - 1)]\r\n        }\r\n        Write-Warning \"$([string]::Join(\",\",$lineNumbers))\"\r\n    }\r\n\r\n}",
                "requireOdsApiAccess": true,
                "hasAttribute": true
            }
        ]
    }
}